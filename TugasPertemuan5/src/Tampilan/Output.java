/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Tampilan;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author milea
 */
public class Output extends javax.swing.JFrame {

    private ArrayList<Book> dataBuku;

    /**
     * Creates new form Output
     */
    public Output() {
        this.refresh();
    }

    private void refresh() {
        try {
            dataBuku = new ArrayList<>();
            initComponents();
            Connection conn = DriverManager.getConnection("jdbc:postgresql://localhost:5432/perpustakaan", "postgres",
                    "postgres");
            tampil(conn);
        } catch (SQLException ex) {
            Logger.getLogger(Output.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void peringatan(String pesan) {
        JOptionPane.showMessageDialog(rootPane, pesan);
    }

    private int masukkanData(Connection conn, int id, String name, String pengarang, String jenis) throws SQLException {
        PreparedStatement pst = conn.prepareStatement("INSERT INTO books (id, name, pengarang, jenis) VALUES(?,?,?,?)");
        pst.setInt(1, id);
        pst.setString(2, name);
        pst.setString(3, pengarang);
        pst.setString(4, jenis);
        return pst.executeUpdate();
    }

    private int updateData(Connection conn, int id, String name, String pengarang, String jenis) throws SQLException {
        PreparedStatement pst = conn.prepareStatement("UPDATE books SET name=?, pengarang=?, jenis=? WHERE id=?;");
        pst.setInt(4, id);
        pst.setString(1, name);
        pst.setString(2, pengarang);
        pst.setString(3, jenis);
        return pst.executeUpdate();
    }

    private int deleteData(Connection conn, int id) throws SQLException {
        PreparedStatement pst = conn.prepareStatement("DELETE FROM books WHERE id=?;");
        pst.setInt(1, id);
        return pst.executeUpdate();
    }

    private void resetField() {
        inputID.setText("");
        inputJudul.setText("");
        inputJenisBuku.setText("");
        inputPengarang.setText("");
    }

    private void tampil(Connection conn) {
        dataBuku.clear();
        try {
            String sql = "select * from books ORDER BY id";
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                Book data = new Book();
                data.setId(rs.getInt(1));
                data.setName(String.valueOf(rs.getObject(2)));
                data.setPengarang(String.valueOf(rs.getObject(3)));
                data.setJenis(String.valueOf(rs.getObject(4)));
                dataBuku.add(data);
            }
            DefaultTableModel model = (DefaultTableModel) tabelBuku.getModel();
            model.setRowCount(0);
            for (Book data : dataBuku) {
                Object[] baris = new Object[4];
                baris[0] = data.getId();
                baris[1] = data.getName();
                baris[2] = data.getPengarang();
                baris[3] = data.getJenis();
                model.addRow(baris);
            }
        } catch (SQLException ex) {
            Logger.getLogger(Output.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        label1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelBuku = new javax.swing.JTable();
        inputID = new javax.swing.JTextField();
        labelID = new javax.swing.JLabel();
        labelPengarang = new javax.swing.JLabel();
        inputPengarang = new javax.swing.JTextField();
        inputJudul = new javax.swing.JTextField();
        labelJudul = new javax.swing.JLabel();
        labelJenisBuku = new javax.swing.JLabel();
        inputJenisBuku = new javax.swing.JTextField();
        btnInsert = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        label1.setFont(new java.awt.Font("Liberation Sans", 1, 24)); // NOI18N
        label1.setText("Daftar Buku");
        label1.setToolTipText("");

        tabelBuku.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Judul", "Pengarang", "Jenis"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelBuku.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelBukuMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabelBuku);
        if (tabelBuku.getColumnModel().getColumnCount() > 0) {
            tabelBuku.getColumnModel().getColumn(0).setResizable(false);
            tabelBuku.getColumnModel().getColumn(1).setResizable(false);
            tabelBuku.getColumnModel().getColumn(2).setResizable(false);
            tabelBuku.getColumnModel().getColumn(3).setResizable(false);
        }

        inputID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputIDActionPerformed(evt);
            }
        });

        labelID.setLabelFor(inputID);
        labelID.setText("ID Buku");

        labelPengarang.setLabelFor(inputPengarang);
        labelPengarang.setText("Pengarang");

        inputPengarang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputPengarangActionPerformed(evt);
            }
        });

        inputJudul.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputJudulActionPerformed(evt);
            }
        });

        labelJudul.setLabelFor(inputJudul);
        labelJudul.setText("Judul");

        labelJenisBuku.setLabelFor(inputJenisBuku);
        labelJenisBuku.setText("Jenis Buku");

        inputJenisBuku.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputJenisBukuActionPerformed(evt);
            }
        });

        btnInsert.setText("Insert");
        btnInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(labelPengarang)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(inputPengarang, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(labelID)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(inputID, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(47, 47, 47)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(labelJenisBuku)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(inputJenisBuku, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(labelJudul)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(inputJudul, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnDelete)
                            .addComponent(btnInsert))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnRefresh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 22, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(288, 288, 288)
                .addComponent(label1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(inputJudul, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(7, 7, 7))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(labelJudul)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(labelJenisBuku)
                                    .addComponent(inputJenisBuku, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(labelID)
                                    .addComponent(inputID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(7, 7, 7)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(labelPengarang)
                                    .addComponent(inputPengarang, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnInsert)
                            .addComponent(btnUpdate))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnDelete)
                            .addComponent(btnRefresh))))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        // TODO add your handling code here:
        try{
         Connection conn = DriverManager.getConnection("jdbc:postgresql://localhost:5432/perpustakaan", "postgres",
                    "postgres");
            tampil(conn);   
            this.peringatan("Berhasil memuat data!");
        }catch(SQLException ex){
         this.peringatan("Gagal memuat data!");
        }
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void inputIDActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_inputIDActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_inputIDActionPerformed

    private void inputPengarangActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_inputPengarangActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_inputPengarangActionPerformed

    private void inputJudulActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_inputJudulActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_inputJudulActionPerformed

    private void inputJenisBukuActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_inputJenisBukuActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_inputJenisBukuActionPerformed

    private void btnInsertActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnInsertActionPerformed
        // TODO add your handling code here:
        int id = Integer.parseInt(inputID.getText().trim());
        String name = inputJudul.getText();
        String pengarang = inputPengarang.getText();
        String jenis = inputJenisBuku.getText();
        if (!name.isEmpty() && !pengarang.isEmpty() && !jenis.isEmpty() && id > 0) {
            try {
                // TODO add your handling code here:
                Connection conn = DriverManager.getConnection("jdbc:postgresql://localhost:5432/perpustakaan",
                        "postgres", "postgres");
                int k = masukkanData(conn, id, name, pengarang, jenis);
                if (k > 0) {
                    tampil(conn);
                    this.peringatan("Simpan Berhasil");
                } else {
                    this.peringatan("Simpan Gagal");
                }
            } catch (SQLException ex) {
                Logger.getLogger(Output.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            this.peringatan("Input Data Buku Gagal");
        }
        this.resetField();
    }// GEN-LAST:event_btnInsertActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        int id = Integer.parseInt(inputID.getText().trim());
        String name = inputJudul.getText();
        String pengarang = inputPengarang.getText();
        String jenis = inputJenisBuku.getText();
        if (!name.isEmpty() && !pengarang.isEmpty() && !jenis.isEmpty() && id > 0) {
            try {
                // TODO add your handling code here:
                Connection conn = DriverManager.getConnection("jdbc:postgresql://localhost:5432/perpustakaan",
                        "postgres", "postgres");
                int k = updateData(conn, id, name, pengarang, jenis);
                if (k > 0) {
                    tampil(conn);
                    this.peringatan("Update Berhasil");
                } else {
                    this.peringatan("Update Gagal");
                }
            } catch (SQLException ex) {
                Logger.getLogger(Output.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            this.peringatan("Update Data Mahasiswa Gagal");
        }
        this.resetField();
    }// GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        int id = Integer.parseInt(inputID.getText().trim());
        if (id > 0) {
            try {
                // TODO add your handling code here:
                Connection conn = DriverManager.getConnection("jdbc:postgresql://localhost:5432/perpustakaan",
                        "postgres", "postgres");
                int k = deleteData(conn, id);
                if (k > 0) {
                    tampil(conn);
                    this.peringatan("Hapus Berhasil");
                } else {
                    this.peringatan("Hapus Gagal");
                }
            } catch (SQLException ex) {
                Logger.getLogger(Output.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            this.peringatan("Delete Data Buku Gagal");
        }
        this.resetField();
    }// GEN-LAST:event_btnDeleteActionPerformed

    private void tabelBukuMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_tabelBukuMouseClicked
        // TODO add your handling code here:
        JTable target = (JTable) evt.getSource();
        int row = target.getSelectedRow();

        inputID.setText(target.getModel().getValueAt(row, 0).toString());
        inputJudul.setText(target.getModel().getValueAt(row, 1).toString());
        inputPengarang.setText(target.getModel().getValueAt(row, 2).toString());
        inputJenisBuku.setText(target.getModel().getValueAt(row, 3).toString());
    }// GEN-LAST:event_tabelBukuMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
        // (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default
         * look and feel.
         * For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Output.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Output.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Output.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Output.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        // </editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Output().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnInsert;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JTextField inputID;
    private javax.swing.JTextField inputJenisBuku;
    private javax.swing.JTextField inputJudul;
    private javax.swing.JTextField inputPengarang;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel label1;
    private javax.swing.JLabel labelID;
    private javax.swing.JLabel labelJenisBuku;
    private javax.swing.JLabel labelJudul;
    private javax.swing.JLabel labelPengarang;
    private javax.swing.JTable tabelBuku;
    // End of variables declaration//GEN-END:variables
}
